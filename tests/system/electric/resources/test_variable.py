import copy
from pathlib import Path

import pandas as pd
import pytest

from new_modeling_toolkit.core.linkage import ResourceToResourceGroup
from new_modeling_toolkit.core.temporal import timeseries as ts
from new_modeling_toolkit.system.electric.resources import VariableResource
from tests.system.electric.resources import test_generic


class TestVariableResource(test_generic.TestGenericResource):
    _RESOURCE_CLASS = VariableResource
    _RESOURCE_GROUP_PATH = Path("resource_groups/Solar.csv")
    _SYSTEM_COMPONENT_DICT_NAME = "variable_resources"

    @pytest.fixture(scope="class")
    def solar_resource(self, make_resource_copy, make_resource_group_copy):
        resource = make_resource_copy()
        resource.capacity_planned = ts.NumericTimeseries(
            name="capacity_planned",
            data=pd.Series(
                index=pd.DatetimeIndex(["2030-01-01"], name="timestamp"),
                data=[100.0],
                name="value",
            ),
        )
        resource.power_output_max = ts.FractionalTimeseries(
            name="power_output_max",
            data=pd.Series(
                name="mw",
                index=pd.date_range(start="2010-01-01 00:00", end="2010-01-11 00:00", freq="H", name="timestamp"),
                data=[
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0.40088815,
                    0.707740048,
                    0.836057558,
                    0.928463738,
                    0.947192943,
                    0.977392567,
                    0.823679541,
                    0.765984519,
                    0.53249687,
                    0.000178308,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0.459112376,
                    0.755765862,
                    0.85353952,
                    0.919175821,
                    0.953153736,
                    0.986465218,
                    0.926101565,
                    0.758920707,
                    0.581495087,
                    0.008174151,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0.416233272,
                    0.778235599,
                    0.871118887,
                    0.974966466,
                    0.986301848,
                    0.959070359,
                    0.9182015,
                    0.809746561,
                    0.609449312,
                    0.017269759,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0.412721606,
                    0.86289374,
                    0.935917417,
                    0.995681773,
                    0.961492926,
                    0.904874119,
                    0.831252162,
                    0.732435947,
                    0.471848825,
                    3.55e-05,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0.442307189,
                    0.770466676,
                    0.925534185,
                    0.97831674,
                    1,
                    0.971731342,
                    0.945400768,
                    0.896447208,
                    0.679742605,
                    0.04428301,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0.263676269,
                    0.751685633,
                    0.894142954,
                    0.945998493,
                    0.960637812,
                    0.853938518,
                    0.710158584,
                    0.566186066,
                    0.400379044,
                    0.010572275,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0.340097995,
                    0.556728791,
                    0.69326623,
                    0.788209473,
                    0.798173347,
                    0.814048673,
                    0.781780975,
                    0.656422862,
                    0.525373565,
                    0.075101321,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0.474330984,
                    0.824925705,
                    0.947986552,
                    0.974566783,
                    0.996037297,
                    0.970495354,
                    0.853937785,
                    0.72077213,
                    0.492757858,
                    0.002420903,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0.436685442,
                    0.873832723,
                    0.979091558,
                    1,
                    1,
                    1,
                    0.977548038,
                    0.86369027,
                    0.656175041,
                    0.013348085,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0.291579206,
                    0.500914288,
                    0.692581224,
                    0.774288415,
                    0.770045393,
                    0.742154713,
                    0.660117544,
                    0.608258802,
                    0.347261277,
                    0.10030496,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                ],
            ),
        )

        # create resource group object
        resource_group = make_resource_group_copy()
        linkage = ResourceToResourceGroup(
            name=("Example Resource", "Solar"),
            instance_from=resource,
            instance_to=resource_group,
        )
        ResourceToResourceGroup.announce_linkage_to_instances()

        weather_year = 2010
        resource.resample_ts_attributes([weather_year, weather_year], [weather_year, weather_year], True, False)
        return resource

    def test_upsample(self, solar_resource, make_resource_group_copy):
        resource = copy.deepcopy(solar_resource)
        load_calendar = pd.date_range(start="2010-01-01 00:00", end="2010-01-10 23:00", freq="H")

        sampled_resource_profile = pd.Series(
            name="value",
            index=load_calendar,
            data=[
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.291579206,
                0.500914288,
                0.692581224,
                0.774288415,
                0.770045393,
                0.742154713,
                0.660117544,
                0.608258802,
                0.347261277,
                0.10030496,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.436685442,
                0.873832723,
                0.979091558,
                1,
                1,
                1,
                0.977548038,
                0.86369027,
                0.656175041,
                0.013348085,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.474330984,
                0.824925705,
                0.947986552,
                0.974566783,
                0.996037297,
                0.970495354,
                0.853937785,
                0.72077213,
                0.492757858,
                0.002420903,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.340097995,
                0.556728791,
                0.69326623,
                0.788209473,
                0.798173347,
                0.814048673,
                0.781780975,
                0.656422862,
                0.525373565,
                0.075101321,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.263676269,
                0.751685633,
                0.894142954,
                0.945998493,
                0.960637812,
                0.853938518,
                0.710158584,
                0.566186066,
                0.400379044,
                0.010572275,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.442307189,
                0.770466676,
                0.925534185,
                0.97831674,
                1,
                0.971731342,
                0.945400768,
                0.896447208,
                0.679742605,
                0.04428301,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.412721606,
                0.86289374,
                0.935917417,
                0.995681773,
                0.961492926,
                0.904874119,
                0.831252162,
                0.732435947,
                0.471848825,
                3.55e-05,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.416233272,
                0.778235599,
                0.871118887,
                0.974966466,
                0.986301848,
                0.959070359,
                0.9182015,
                0.809746561,
                0.609449312,
                0.017269759,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.459112376,
                0.755765862,
                0.85353952,
                0.919175821,
                0.953153736,
                0.986465218,
                0.926101565,
                0.758920707,
                0.581495087,
                0.008174151,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.40088815,
                0.707740048,
                0.836057558,
                0.928463738,
                0.947192943,
                0.977392567,
                0.823679541,
                0.765984519,
                0.53249687,
                0.000178308,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
        )

        resource.resource_group.day_draw_map = pd.Series(
            index=pd.date_range(start="2010-01-01 00:00", end="2010-01-10 23:00", freq="D", name="timestamp"),
            data=pd.to_datetime(
                [
                    "1/10/2010",
                    "1/9/2010",
                    "1/8/2010",
                    "1/7/2010",
                    "1/6/2010",
                    "1/5/2010",
                    "1/4/2010",
                    "1/3/2010",
                    "1/2/2010",
                    "1/1/2010",
                ]
            ),
        )

        # test upsample function
        resource.upsample(load_calendar=load_calendar)
        pd.testing.assert_series_equal(resource.power_output_max.data.loc[load_calendar], sampled_resource_profile)

    def test_upsample_no_overlap(self, solar_resource, make_resource_group_copy):
        resource = copy.deepcopy(solar_resource)
        load_calendar = pd.date_range(start="2025-01-01 00:00", end="2025-01-10 23:00", freq="H")

        sampled_resource_profile = pd.Series(
            name="value",
            index=load_calendar,
            data=[
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.291579206,
                0.500914288,
                0.692581224,
                0.774288415,
                0.770045393,
                0.742154713,
                0.660117544,
                0.608258802,
                0.347261277,
                0.10030496,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.436685442,
                0.873832723,
                0.979091558,
                1,
                1,
                1,
                0.977548038,
                0.86369027,
                0.656175041,
                0.013348085,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.474330984,
                0.824925705,
                0.947986552,
                0.974566783,
                0.996037297,
                0.970495354,
                0.853937785,
                0.72077213,
                0.492757858,
                0.002420903,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.340097995,
                0.556728791,
                0.69326623,
                0.788209473,
                0.798173347,
                0.814048673,
                0.781780975,
                0.656422862,
                0.525373565,
                0.075101321,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.263676269,
                0.751685633,
                0.894142954,
                0.945998493,
                0.960637812,
                0.853938518,
                0.710158584,
                0.566186066,
                0.400379044,
                0.010572275,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.442307189,
                0.770466676,
                0.925534185,
                0.97831674,
                1,
                0.971731342,
                0.945400768,
                0.896447208,
                0.679742605,
                0.04428301,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.412721606,
                0.86289374,
                0.935917417,
                0.995681773,
                0.961492926,
                0.904874119,
                0.831252162,
                0.732435947,
                0.471848825,
                3.55e-05,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.416233272,
                0.778235599,
                0.871118887,
                0.974966466,
                0.986301848,
                0.959070359,
                0.9182015,
                0.809746561,
                0.609449312,
                0.017269759,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.459112376,
                0.755765862,
                0.85353952,
                0.919175821,
                0.953153736,
                0.986465218,
                0.926101565,
                0.758920707,
                0.581495087,
                0.008174151,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0.40088815,
                0.707740048,
                0.836057558,
                0.928463738,
                0.947192943,
                0.977392567,
                0.823679541,
                0.765984519,
                0.53249687,
                0.000178308,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
            ],
        )

        resource.resource_group.day_draw_map = pd.Series(
            index=pd.date_range(start="2025-01-01 00:00", end="2025-01-10 23:00", freq="D", name="timestamp"),
            data=pd.to_datetime(
                [
                    "1/10/2010",
                    "1/9/2010",
                    "1/8/2010",
                    "1/7/2010",
                    "1/6/2010",
                    "1/5/2010",
                    "1/4/2010",
                    "1/3/2010",
                    "1/2/2010",
                    "1/1/2010",
                ]
            ),
        )

        # test upsample function
        resource.upsample(load_calendar=load_calendar)
        pd.testing.assert_series_equal(resource.power_output_max.data.loc[load_calendar], sampled_resource_profile)

    def test_upsample_outage_profile(self, solar_resource):
        resource = copy.deepcopy(solar_resource)
        resource.resource_group.day_draw_map = pd.Series(
            index=pd.date_range(start="2010-01-01 00:00", end="2010-01-02 23:00", freq="D", name="timestamp"),
            data=pd.to_datetime(["1/2/2010", "1/1/2010"]),
        )
        load_calendar = pd.date_range(start="2010-01-01 00:00", end="2010-01-02 23:00", freq="H", name="timestamp")
        resource.upsample(load_calendar)
        pd.testing.assert_series_equal(
            resource.outage_profile.data,
            pd.Series(
                index=pd.date_range(start="2010-01-01 00:00", end="2010-12-31 23:00", freq="H", name="timestamp"),
                data=[1.0] * 24 + [1.0, 0.0, 0.5, 1.0] + [1.0] * (8760 - 28),
                name="value",
            ),
        )

    def test_upsample_power_output_min(self, solar_resource):
        resource = copy.deepcopy(solar_resource)
        resource.resource_group.day_draw_map = pd.Series(
            index=pd.date_range(start="2010-01-01 00:00", end="2010-01-02 23:00", freq="D", name="timestamp"),
            data=pd.to_datetime(["1/2/2010", "1/1/2010"]),
        )

        load_calendar = pd.date_range(start="2010-01-01 00:00", end="2010-01-01 12:00", freq="H", name="timestamp")
        resource.upsample(load_calendar)
        pd.testing.assert_series_equal(
            resource.power_output_min.data,
            pd.Series(
                index=pd.date_range(start="2010-01-01 00:00", end="2010-12-31 23:00", freq="H", name="timestamp"),
                data=0.25,
                name="value",
            ),
            check_names=False,
        )

    def test_upsample_power_input_max(self, solar_resource):
        resource = copy.deepcopy(solar_resource)
        resource.resource_group.day_draw_map = pd.Series(
            index=pd.date_range(start="2010-01-01 00:00", end="2010-01-02 23:00", freq="D", name="timestamp"),
            data=pd.to_datetime(["1/2/2010", "1/1/2010"]),
        )
        load_calendar = pd.date_range(start="2010-01-01 00:00", end="2010-01-01 12:00", freq="H", name="timestamp")
        resource.upsample(load_calendar)
        pd.testing.assert_series_equal(
            resource.power_input_max.data,
            pd.Series(
                index=pd.date_range(start="2010-01-01 00:00", end="2010-12-31 23:00", freq="H", name="timestamp"),
                data=0.5,
                name="value",
            ),
            check_names=False,
        )

    def test_upsample_power_input_min(self, solar_resource):
        resource = solar_resource
        resource.resource_group.day_draw_map = pd.Series(
            index=pd.date_range(start="2010-01-01 00:00", end="2010-01-02 23:00", freq="D", name="timestamp"),
            data=pd.to_datetime(["1/2/2010", "1/1/2010"]),
        )
        load_calendar = pd.date_range(start="2010-01-01 00:00", end="2010-01-01 12:00", freq="H", name="timestamp")
        resource.upsample(load_calendar)
        pd.testing.assert_series_equal(
            resource.power_input_min.data,
            pd.Series(
                index=pd.date_range(start="2010-01-01 00:00", end="2010-12-31 23:00", freq="H"),
                data=0.0,
            ),
        )

    def test_variable_bounds(self):
        pass

    def test_power_output_max_constraint(self):
        pass

    def test_power_output_min_constraint(self):
        pass

    def test_power_input_max_constraint(self):
        pass

    def test_upsample_energy_budget_annual(self):
        pass

    def test_upsample_energy_budget_daily(self):
        pass

    def test_upsample_energy_budget_monthly(self):
        pass

    def test_adjust_budgets_for_optimization(self):
        pass

    def test_annual_energy_budget_constraint(self):
        pass

    def test_daily_energy_budget_constraint(self):
        pass

    def test_monthly_energy_budget_constraint(self):
        pass
